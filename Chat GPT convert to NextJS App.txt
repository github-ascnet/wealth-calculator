Kannst Du mir diese HTML/CSS/JS Applikation vollständig in eine NetxJS 14 React Applikation mit Tailwind CSS und API Routes umbauen?


index.html file
<!DOCTYPE html>
<html lang="en">

<head></head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Interactive asset growth calculator that visualizes annual profits, dividends, and cashflow over a specified period. Perfect for financial planning and investment simulations.">
    <meta name="keywords" content="Asset Growth, Financial Planning, Investment Calculator, Profit Simulation, Dividends, Cashflow">
    <meta name="author" content="Your Name or Company">
    <meta name="robots" content="index, follow">
    <meta property="og:title" content="Asset Growth Calculation Tool">
    <meta property="og:description" content="Explore and visualize asset growth with customizable annual returns, dividends, and cashflow projections.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://wealthcalc.ascnet.ch/">
    <meta property="og:image" content="https://wealthcalc.ascnet.ch/og-image.png">
    <meta property="og:locale" content="en_US">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Asset Growth Calculation Tool">
    <meta name="twitter:description" content="Calculate and visualize asset growth, dividends, and cashflow projections for financial planning.">
    <meta name="twitter:image" content="https://wealthcalc.ascnet.ch/og-image.png">
    <title>Asset Growth Calculator - Visualize Your Financial Future</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="site.css">
</head>

<body class="container mt-3">

    <header>
        <h1 class="text-center" id="titel">Asset Growth Calculator</h1>
    </header>

    <main>
        <section class="input_wrapper">
            <div class="input_container">
                <div class="row">

                    <div class="col-md-6 mb-1">
                        <label for="startkapital" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="The capital invested at the beginning.">Starting Capital </label>
                        <input type="number" class="form-control" id="startkapital" value="250000" min="10000" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                    <div class="col-md-6 mb-1">
                        <label for="renditeProJahr" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="Percentage annual return.">% Profit by Year </label>
                        <input type="number" class="form-control" id="renditeProJahr" value="15" min="0" max="500" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                    <div class="col-md-6 mb-1">
                        <label for="dividendeProzent" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="Percentage dividend based on assets.">% Dividends by Year </label>
                        <input type="number" class="form-control" id="dividendeProzent" value="1.2" min="0" max="10" step="0.1" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                    <div class="col-md-6 mb-1">
                        <label for="jahre" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="Number of years for the calculation.">Years to measure </label>
                        <input type="number" class="form-control" id="jahre" value="12" min="1" max="50" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                    <div class="col-md-6 mb-1">
                        <label for="standardabweichung" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="Average standard deviation of the return in Percentage.">% Standard deviation by Year </label>
                        <input type="number" class="form-control" id="standardabweichung" value="18" min="0" max="500" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                    <div class="col-md-6 mb-1">
                        <label for="relativerBezug" class="form-label" data-bs-toggle="tooltip" data-bs-placement="right" title="Percentage annual payout deducted from assets.">% Cashflow p.a. </label>
                        <input type="number" class="form-control" id="relativerBezug" value="5" min="0" max="50" oninput="validateInput(this); berechneVermoegen()" onfocusout="sanitizeInput(this)">
                    </div>

                </div>
                <div class="text-center">
                    <button id="simulateButton" class="btn btn-secondary btn-sm w-50">
                        Start Simulation
                    </button>
                </div>
            </div>
        </section>

        <section class="chart_wrapper">
            <div class="chart_container">
                <div id="vermoegenChartContainer">
                    <canvas id="vermoegenChart" width="800" height="400"></canvas>
                </div>
                <div class="growth_summary text-center">
                    <p id="wachstumProzent"></p>
                </div>
                <div id="bezugDataChartContainer">
                    <canvas id="bezugDataChart" width="800" height="400"></canvas>
                </div>
            </div>
        </section>
    </main>

    <footer class="text-center mt-4 text-sm">
        <p>&copy; 2024 ASCNET Solutions GmbH. All rights reserved.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="site.js"></script>

</body>

</html>

site.js File
function validateInput(input) {
  const value = parseFloat(input.value); // Konvertiert den Eingabewert in eine Zahl
  const min = parseFloat(input.min); // Minimal erlaubter Wert
  const max = parseFloat(input.max); // Maximal erlaubter Wert
  const step = parseFloat(input.step); // Schrittweite (0.1)

  // Prüfen, ob der Wert leer ist
  if (isNaN(value)) {
    input.setCustomValidity("This field cannot be empty.");
    input.reportValidity();
    return;
  }

  // Prüfen, ob der Wert kleiner als der minimale Wert ist
  if (value < min) {
    input.setCustomValidity(`The value must be at least ${min}.`);
    input.reportValidity();
    return;
  }

  // Prüfen, ob der Wert größer als der maximale Wert ist
  if (value > max) {
    input.setCustomValidity(`The value cannot exceed ${max}.`);
    input.reportValidity();
    return;
  }

  // Prüfen, ob der Wert mit der Schrittweite kompatibel ist
  if (step && (value - min) % step !== 0) {
    input.setCustomValidity(`The value must be a multiple of ${step}.`);
    input.reportValidity();
    return;
  }

  // Wenn alle Prüfungen bestanden sind, die Validierung zurücksetzen
  input.setCustomValidity("");
  input.reportValidity();
}

function sanitizeInput(inputElement) {
  inputElement.value = inputElement.value.replace(/[^\d.]/g, ""); // Nur Zahlen und Punkt zulassen
}

function berechneVermoegen() {
  const startkapital = parseFloat(
    document.getElementById("startkapital").value
  );
  const renditeProJahr =
    parseFloat(document.getElementById("renditeProJahr").value) / 100;
  const jahre = parseInt(document.getElementById("jahre").value);
  const standardAbweichung =
    parseFloat(document.getElementById("standardabweichung").value) / 100;
  const relativerBezug =
    parseFloat(document.getElementById("relativerBezug").value) / 100;
  const dividendeProzent =
    parseFloat(document.getElementById("dividendeProzent").value) / 100;

  const renditeProJahrWert = parseFloat(
    document.getElementById("renditeProJahr").value
  );
  document.getElementById(
    "titel"
  ).textContent = `Asset Growth at ${renditeProJahrWert}% Profit per Year`;

  const chartLabels = [];
  const chartData = [];
  const bezugData = [];
  const dividendeData = [];

  let vermoegenErstesJahr = startkapital;
  let vermoegenLetztesJahr = startkapital;

  let highWatermark = startkapital;
  let maxDrawdown = 0;

  function normaleZufallszahl(mean, stdDev) {
    let u1 = Math.random();
    let u2 = Math.random();
    let z = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);
    return mean + z * stdDev;
  }

  const aktuellesJahr = new Date().getFullYear() + 1;

  for (let jahr = 0; jahr < jahre; jahr++) {
    const abweichung = normaleZufallszahl(0, standardAbweichung);
    const effektiveRendite = renditeProJahr + abweichung;
    let betrag = vermoegenLetztesJahr * (1 + effektiveRendite);

    const bezug = betrag * relativerBezug;
    const dividende = betrag * dividendeProzent;

    betrag = Math.max(betrag - bezug, 0);

    if (jahr === 0) vermoegenErstesJahr = betrag;
    vermoegenLetztesJahr = betrag;

    if (betrag > highWatermark) {
      highWatermark = betrag;
    } else {
      const drawdown = ((highWatermark - betrag) / highWatermark) * 100;
      maxDrawdown = Math.max(maxDrawdown, drawdown);
    }

    chartLabels.push(aktuellesJahr + jahr);
    chartData.push(betrag);
    bezugData.push(bezug);
    dividendeData.push(dividende);
  }

  const wachstum =
    ((vermoegenLetztesJahr - vermoegenErstesJahr) / vermoegenErstesJahr) * 100;
  document.getElementById(
    "wachstumProzent"
  ).textContent = `The assets grew by ${wachstum.toFixed(
    2
  )}% and had a max. drawdown of ${maxDrawdown.toFixed(2)}%.`;

  renderCharts(chartLabels, chartData, bezugData, dividendeData);
}

let existingChart = null;
let existingBezugChart = null;

function renderCharts(labels, data, bezugData, dividendeData) {
  // Prüfen, ob der Viewport kleiner als 768px ist
  const isSmallViewport = window.innerWidth < 768;

  // Vermögenswachstum-Chart
  const ctx1 = document.getElementById("vermoegenChart").getContext("2d");
  if (existingChart) existingChart.destroy();
  existingChart = new Chart(ctx1, {
    type: "line",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Profit",
          data: data,
          borderColor: "green",
          backgroundColor: "rgba(0, 255, 0, 0.2)",
          tension: 0.1,
          fill: false,
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false, // Ermöglicht flexible Höhenanpassung
      plugins: {
        datalabels: {
          display: !isSmallViewport,
          color: "black",
          anchor: "end",
          align: "top",
          font: {
            size: 10,
            family: "Poppins",
          },
          formatter: function (value) {
            const kValue = Math.floor(value / 1000); // In Tausendern (K) anzeigen
            return `${kValue}K`;
          },
        },
      },
      scales: {
        x: {
          title: {
            display: false,
            text: "Years",
          },
        },
        y: {
          title: {
            display: !isSmallViewport,
            text: "Profit in 1000 (USD)",
          },
        },
      },
    },
    plugins: [ChartDataLabels],
  });

  const ctx2 = document.getElementById("bezugDataChart").getContext("2d");
  if (existingBezugChart) existingBezugChart.destroy();
  existingBezugChart = new Chart(ctx2, {
    type: "line",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Cashflow",
          data: bezugData,
          borderColor: "red",
          backgroundColor: "rgba(255, 0, 0, 0.2)",
          tension: 0.1,
          fill: false,
          yAxisID: "y",
        },
        {
          label: "Dividends",
          data: dividendeData,
          borderColor: "blue",
          backgroundColor: "rgba(0, 0, 255, 0.2)",
          tension: 0.1,
          fill: false,
          yAxisID: "y",
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false, // Ermöglicht flexible Höhenanpassung
      plugins: {
        datalabels: {
          display: !isSmallViewport, // Blendet Datalabels bei kleinen Viewports aus
          color: "black",
          anchor: "end",
          align: "top",
          font: {
            size: 10,
            family: "Poppins",
          },
          formatter: function (value) {
            const kValue = Math.floor(value / 1000); // In Tausendern (K) anzeigen
            return `${kValue}K`;
          },
        },
      },
      scales: {
        x: {
          title: {
            display: false,
            text: "Years",
          },
        },
        y: {
          title: {
            display: !isSmallViewport,
            text: "Cashflow/Dividends In 1000 (USD)",
          },
        },
      },
    },
    plugins: [ChartDataLabels],
  });
}

berechneVermoegen();

let simulationInterval;
let isSimulating = false;
let simulationCount = 0;

function startSimulation() {
  if (isSimulating) {
    clearInterval(simulationInterval);
    isSimulating = false;
    simulationCount = 0;
    document.getElementById("simulateButton").textContent = "Start Simulation";
    return;
  }

  isSimulating = true;
  simulationCount = 0;
  document.getElementById("simulateButton").textContent = "Stop Simulation";

  berechneVermoegen();

  simulationInterval = setInterval(() => {
    if (simulationCount >= 50) {
      clearInterval(simulationInterval);
      isSimulating = false;
      simulationCount = 0;
      document.getElementById("simulateButton").textContent =
        "Start Simulation";
      return;
    }
    berechneVermoegen();
    simulationCount++;
  }, 5000);
}

document
  .getElementById("simulateButton")
  .addEventListener("click", startSimulation);

document.addEventListener("DOMContentLoaded", function () {
  const tooltipTriggerList = [].slice.call(
    document.querySelectorAll('[data-bs-toggle="tooltip"]')
  );
  tooltipTriggerList.forEach(function (tooltipTriggerEl) {
    new bootstrap.Tooltip(tooltipTriggerEl);
  });
});

site.css file
/* Allgemeine Stile */
body {
  font-family: "Poppins", sans-serif;
}

/* Eingabebereich mit Rahmen, Schatten und runden Ecken */
.input-wrapper {
  border: 2px solid #d3d3d3; /* Hellgrauer Rahmen */
  border-radius: 8px; /* Abgerundete Ecken */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 3D Schatteneffekt */
  padding: 10px; /* Innenabstand */
  background-color: #fff; /* Weißer Hintergrund */
  margin-bottom: 20px; /* Abstand unterhalb des Containers */
}

/* Eingabecontainer */
.input_container {
  display: flex;
  flex-direction: column;
  width: 80%;
  margin: 20px auto;
  gap: 15px;
}

.input_row {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 5px;
  width: 100%;
}

.form-label {
  flex: 0 0 30%;
  text-align: right;
  font-size: 13px; /* Optional: Schriftgröße anpassen */
  margin-bottom: 2px;
}

.form-control {
  flex: 0 0 30%;
  height: 30px; /* Reduziert die Höhe der Input-Felder */
  font-size: 12px; /* Optional: Schriftgröße anpassen */
  padding: 5px 10px; /* Optional: Innenabstand anpassen */
}

/* Simulationsbutton */
#simulateButton {
  display: block;
  margin: 10px auto;
  width: 50%; /* Breiter Button */
}

/* Chart Container */
.chart_container {
  display: flex;
  flex-direction: column; /* Vertikale Anordnung */
  align-items: center; /* Zentriert die Charts horizontal */
  justify-content: center; /* Zentriert die Charts vertikal */
  gap: 15px; /* Abstand zwischen den Charts */
  height: auto; /* Höhe automatisch anpassen */
}

/* Einzelne Chart-Container */
#vermoegenChartContainer,
#bezugDataChartContainer {
  display: flex;
  justify-content: center; /* Zentriert den Canvas */
  align-items: center;
  flex-grow: 1; /* Charts können wachsen */
}

canvas {
  max-width: 80%;
  height: 70vh; /* Standardhöhe: 50% der Viewport-Höhe */
}

/* Wachstum Zusammenfassung */
.growth_summary {
  text-align: center;
}

#wachstumProzent {
    font-size: 12px;
}

@media (max-width: 786px) {
  body {
    font-size: 10px;
  }

  #titel {
    font-size: 14px;
  }

  .input_container .row {
    flex-direction: column;
    width: 100%;
  }

  .input_row {
    flex-direction: column;
    width: 80%;
    margin: 0 auto;
    gap: 2px;
  }

  .col-md-6 {
    width: 100%;
  }

  .form-label {
    width: 100%;
    text-align: left;
  }

  .form-control {
    width: 100%;
  }

  .form-label,
  .form-control {
    font-size: 10px;
  }

  /* #simulateButton {
    display: none; /* Versteckt den Button */
  } */

  .chart_container {
    margin-top: 50px;
    height: 40vh; /* Gesamte Höhe des Viewports */
    gap: 10px; /* Abstand zwischen den Charts */
  }

  #vermoegenChartContainer,
  #bezugDataChartContainer {
    width: 100%; /* Volle Breite */
  }

  canvas {
    max-width: 100%;
    height: 100%; /* Canvas passt sich an die Höhe der Container an */
  }

  #wachstumProzent {
    font-size: 10px;
  }
}
